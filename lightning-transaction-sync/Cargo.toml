[package]
name = "lightning-transaction-sync"
version = "0.2.0-beta1"
authors = ["Elias Rohrer"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/lightningdevkit/rust-lightning"
description = """
Utilities for syncing LDK via the transaction-based `Confirm` interface.
"""
edition = "2021"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[features]
default = ["time"]
time = []
esplora-async = ["async-interface", "esplora-client/async", "esplora-client/tokio", "futures"]
esplora-async-https = ["esplora-async", "esplora-client/async-https-rustls"]
esplora-blocking = ["esplora-client/blocking"]
async-interface = []

# dummy feature to enable the common codepaths for electrum
_electrum = []
# the 'default' electrum feature, enabling `rustls` with the `aws-lc-rs` crypto provider
electrum = ["_electrum", "electrum-client/use-rustls"]
electrum-rustls = ["electrum"]

# this feature enables `rustls` with the `ring` crypto provider
electrum-rustls-ring = ["_electrum", "electrum-client/use-rustls-ring"]

[dependencies]
lightning = { version = "0.2.0-beta1", path = "../lightning", default-features = false, features = ["std"] }
lightning-macros = { version = "0.2.0-beta1", path = "../lightning-macros", default-features = false }
bitcoin = { version = "0.32.2", default-features = false }
futures = { version = "0.3", optional = true }
esplora-client = { version = "0.12", default-features = false, optional = true }
electrum-client = { version = "0.24.0", optional = true, default-features = false, features = ["proxy"] }

[dev-dependencies]
lightning = { version = "0.2.0-beta1", path = "../lightning", default-features = false, features = ["std", "_test_utils"] }
tokio = { version = "1.35.0", features = ["macros"] }

[target.'cfg(not(target_os = "windows"))'.dev-dependencies]
electrsd = { version = "0.35.0", default-features = false, features = ["legacy"] }
corepc-node = { version = "0.8.0", default-features = false, features = ["28_0"] }

[lints.rust.unexpected_cfgs]
level = "forbid"
# When adding a new cfg attribute, ensure that it is added to this list.
#
# Note that Cargo automatically declares corresponding cfgs for every feature
# defined in the member-level [features] tables as "expected".
check-cfg = [
]
